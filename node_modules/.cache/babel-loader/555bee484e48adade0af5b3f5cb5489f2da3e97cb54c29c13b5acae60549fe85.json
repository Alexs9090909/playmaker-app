{"ast":null,"code":"const apiKey = \"BQBQu603MWS2Q51LqWhhpzvX359-d8oxQ4U1YseT05hjzRPKTGV2HXUOabr06FYhbocyvuSDKN-iOSdVfI3Z46y19GtFUr7Gfie1LKnH3VIeoAR-aCtfRqQ28u_FYQ1EnH2cnP7YI8u16cAympJhVNG7PolFX8fRKTI2yLftSx9cJASrv8Yg6c21xrjVOzFYUJwU-CdVByVsIzXohZ8pDtw5E6Pjr0Ws2pwXWxi0tdg3UaZ7Bb_ePpU1swSo\"; // Access token à renouveler toutes les heures \n\nconst Spotify = {\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      const items = jsonResponse.tracks.items;\n      const itemsArray = Object.values(items);\n      return itemsArray;\n    });\n  },\n  save(playlistTitle, playlistTracks) {\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      const user_id = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          \"name\": playlistTitle,\n          \"description\": \"New playlist description\",\n          \"public\": false\n        })\n      }).then(secondResponse => {\n        return secondResponse.json();\n      }, networkError => console.log(networkError.message)).then(secondJsonResponse => {\n        const playlist_id = secondJsonResponse.id;\n        // console.log('is playlistTracks an array ? > ' + Array.isArray(playlistTracks));\n        // console.log(\"content of playlistTracks is : \" + playlistTracks);\n        return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists/${playlist_id}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            \"uris\": playlistTracks\n          })\n        });\n      });\n    }).catch(error => {\n      console.error('Erreur lors de la requête man :', error);\n    });\n  }\n};\nexport default Spotify;\n\n/*\n\nhttp://localhost:3000/#access_token=\n\nBQAXmZzANGKXOSaIQaxRlngYF13k3-vjkcTYGIoLthSMBcU_tiYhDtRSeZJr07BxjbZgLR5mmOcsYnnarZYWhK-t-0uX5DS2Vc9pGVwcAOO4GbZiwKC81S1vtLvKMYJhcSCO0kXQa07E1l3yJIm2MIXQ4BTDtoUV1JvHUr2pZ0OKrrP3nPgcYLr2po5V8xtLUhp3MSvAXSf7OW1PiwVMJlEqUY3T8RxUXbjuoIpip4oTh681LyGzHRA5vjmz\n\n&token_type=Bearer&expires_in=3600&state=XPubkNMqxCslAjw0\n\n\nhttp://localhost:3000/#access_token=\n\nBQBQu603MWS2Q51LqWhhpzvX359-d8oxQ4U1YseT05hjzRPKTGV2HXUOabr06FYhbocyvuSDKN-iOSdVfI3Z46y19GtFUr7Gfie1LKnH3VIeoAR-aCtfRqQ28u_FYQ1EnH2cnP7YI8u16cAympJhVNG7PolFX8fRKTI2yLftSx9cJASrv8Yg6c21xrjVOzFYUJwU-CdVByVsIzXohZ8pDtw5E6Pjr0Ws2pwXWxi0tdg3UaZ7Bb_ePpU1swSo\n\n&token_type=Bearer&expires_in=3600&state=emGMhBkNZ1GqYhQw\n\n\n*/","map":{"version":3,"names":["apiKey","Spotify","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","tracks","itemsArray","Object","values","save","playlistTitle","playlistTracks","user_id","id","method","body","JSON","stringify","secondResponse","networkError","console","log","message","secondJsonResponse","playlist_id","catch","error"],"sources":["/Users/alexandresuteau/Desktop/CODE/CODECADEMY/07_Create a Front-End APP with React/99_PROJECT_Jammming/jammming/src/utils/Spotify.js"],"sourcesContent":["const apiKey = \"BQBQu603MWS2Q51LqWhhpzvX359-d8oxQ4U1YseT05hjzRPKTGV2HXUOabr06FYhbocyvuSDKN-iOSdVfI3Z46y19GtFUr7Gfie1LKnH3VIeoAR-aCtfRqQ28u_FYQ1EnH2cnP7YI8u16cAympJhVNG7PolFX8fRKTI2yLftSx9cJASrv8Yg6c21xrjVOzFYUJwU-CdVByVsIzXohZ8pDtw5E6Pjr0Ws2pwXWxi0tdg3UaZ7Bb_ePpU1swSo\" // Access token à renouveler toutes les heures \n\nconst Spotify = {\n    search(term) {\n        return fetch(\n            `https://api.spotify.com/v1/search?q=${term}&type=track`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                const items = jsonResponse.tracks.items;\n                const itemsArray = Object.values(items);\n                return itemsArray;\n            })\n    },\n\n    save(playlistTitle, playlistTracks) {\n        return fetch(\n            `https://api.spotify.com/v1/me`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                const user_id = jsonResponse.id;\n                return fetch(\n                    `https://api.spotify.com/v1/users/${user_id}/playlists`,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            \"name\": playlistTitle,\n                            \"description\": \"New playlist description\",\n                            \"public\": false\n                        }),\n                    }\n                )\n                    .then((secondResponse) => {\n                        return secondResponse.json();\n                    }, networkError => console.log(networkError.message)\n                    ).then(secondJsonResponse => {\n                        const playlist_id = secondJsonResponse.id;\n                        // console.log('is playlistTracks an array ? > ' + Array.isArray(playlistTracks));\n                        // console.log(\"content of playlistTracks is : \" + playlistTracks);\n                        return fetch(\n                            `https://api.spotify.com/v1/users/${user_id}/playlists/${playlist_id}/tracks`,\n                            {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    Authorization: `Bearer ${apiKey}`\n                                },\n                                body: JSON.stringify({\n                                    \"uris\": playlistTracks,\n                                }),\n                            }\n                        )\n                    })\n                    ;\n            })\n\n            .catch((error) => {\n                console.error('Erreur lors de la requête man :', error);\n            });\n    }\n}\n\n\nexport default Spotify;\n\n\n\n/*\n\nhttp://localhost:3000/#access_token=\n\nBQAXmZzANGKXOSaIQaxRlngYF13k3-vjkcTYGIoLthSMBcU_tiYhDtRSeZJr07BxjbZgLR5mmOcsYnnarZYWhK-t-0uX5DS2Vc9pGVwcAOO4GbZiwKC81S1vtLvKMYJhcSCO0kXQa07E1l3yJIm2MIXQ4BTDtoUV1JvHUr2pZ0OKrrP3nPgcYLr2po5V8xtLUhp3MSvAXSf7OW1PiwVMJlEqUY3T8RxUXbjuoIpip4oTh681LyGzHRA5vjmz\n\n&token_type=Bearer&expires_in=3600&state=XPubkNMqxCslAjw0\n\n\nhttp://localhost:3000/#access_token=\n\nBQBQu603MWS2Q51LqWhhpzvX359-d8oxQ4U1YseT05hjzRPKTGV2HXUOabr06FYhbocyvuSDKN-iOSdVfI3Z46y19GtFUr7Gfie1LKnH3VIeoAR-aCtfRqQ28u_FYQ1EnH2cnP7YI8u16cAympJhVNG7PolFX8fRKTI2yLftSx9cJASrv8Yg6c21xrjVOzFYUJwU-CdVByVsIzXohZ8pDtw5E6Pjr0Ws2pwXWxi0tdg3UaZ7Bb_ePpU1swSo\n\n&token_type=Bearer&expires_in=3600&state=emGMhBkNZ1GqYhQw\n\n\n*/\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,8PAA8P,EAAC;;AAE9Q,MAAMC,OAAO,GAAG;EACZC,MAAMA,CAACC,IAAI,EAAE;IACT,OAAOC,KAAK,CACP,uCAAsCD,IAAK,aAAY,EACxD;MACIE,OAAO,EAAE;QACLC,aAAa,EAAG,UAASN,MAAO;MACpC;IACJ,CAEJ,CAAC,CACIO,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDF,IAAI,CAAEG,YAAY,IAAK;MACpB,MAAMC,KAAK,GAAGD,YAAY,CAACE,MAAM,CAACD,KAAK;MACvC,MAAME,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;MACvC,OAAOE,UAAU;IACrB,CAAC,CAAC;EACV,CAAC;EAEDG,IAAIA,CAACC,aAAa,EAAEC,cAAc,EAAE;IAChC,OAAOd,KAAK,CACP,+BAA8B,EAC/B;MACIC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASN,MAAO;MACpC;IACJ,CACJ,CAAC,CACIO,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDF,IAAI,CAAEG,YAAY,IAAK;MACpB,MAAMS,OAAO,GAAGT,YAAY,CAACU,EAAE;MAC/B,OAAOhB,KAAK,CACP,oCAAmCe,OAAQ,YAAW,EACvD;QACIE,MAAM,EAAE,MAAM;QACdhB,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASN,MAAO;QACpC,CAAC;QACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB,MAAM,EAAEP,aAAa;UACrB,aAAa,EAAE,0BAA0B;UACzC,QAAQ,EAAE;QACd,CAAC;MACL,CACJ,CAAC,CACIV,IAAI,CAAEkB,cAAc,IAAK;QACtB,OAAOA,cAAc,CAAChB,IAAI,CAAC,CAAC;MAChC,CAAC,EAAEiB,YAAY,IAAIC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,OAAO,CACnD,CAAC,CAACtB,IAAI,CAACuB,kBAAkB,IAAI;QACzB,MAAMC,WAAW,GAAGD,kBAAkB,CAACV,EAAE;QACzC;QACA;QACA,OAAOhB,KAAK,CACP,oCAAmCe,OAAQ,cAAaY,WAAY,SAAQ,EAC7E;UACIV,MAAM,EAAE,MAAM;UACdhB,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;YAClCC,aAAa,EAAG,UAASN,MAAO;UACpC,CAAC;UACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjB,MAAM,EAAEN;UACZ,CAAC;QACL,CACJ,CAAC;MACL,CAAC,CAAC;IAEV,CAAC,CAAC,CAEDc,KAAK,CAAEC,KAAK,IAAK;MACdN,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC3D,CAAC,CAAC;EACV;AACJ,CAAC;AAGD,eAAehC,OAAO;;AAItB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}