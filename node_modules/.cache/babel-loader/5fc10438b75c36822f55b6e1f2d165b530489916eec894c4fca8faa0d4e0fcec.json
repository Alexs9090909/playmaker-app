{"ast":null,"code":"const apiKey = \"BQAdWaHnVSALSU79mwzaSdb6qt9hUF4eMdvMT01vT4KxlRGZu3zHt1MbC0OeX4JS8fKofRQyHgAC8IKEPKEGlsqxslcaIVD4V4nJvsYXf0TKn-gjo81vssO3F-fxrvmHmsbNCeL_hX9dUTUJRJ0si6uBIOMWT_JDa5HD-5Ge-vHTNfQ0MBys5tNwS49CqTEFNiG7WA\"; // Access token à renouveler toutes les heures \n\nconst Spotify = {\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      // console.log(jsonResponse);\n      // console.log('jsonResponse is an ' + typeof jsonResponse);\n      // console.log(jsonResponse.tracks)\n      // console.log(jsonResponse.tracks.items)\n      const items = jsonResponse.tracks.items;\n      // const arrayFromJson = Array.from(jsonResponse.tracks.items);\n\n      // console.log('arrayFromJson is an ' + typeof arrayFromJson);\n      // console.log('arrayFromJson is ' + typeof arrayFromJson);\n      // console.log(arrayFromJson);\n\n      // console.log(items[0]);\n      const itemsArray = Object.values(items);\n      // console.log(typeof itemsArray);\n      // console.log(itemsArray);\n      // console.log(typeof itemsArray);\n      // console.log(itemsArray);\n\n      /* const arrayFromJsonMap = items.map((track, index) => {\n          [index] = {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album,\n              url: track.uri,\n          }\n      }) */\n\n      // console.log(arrayFromJsonMap);\n      return itemsArray;\n\n      /*\n      if (arrayFromJson) { // track est il bien le bon suffixe ?\n          return arrayFromJson.map((track) => ({\n              id: track.id,\n              name: track.name,\n              artist: track.artist,\n              album: track.album,\n              url: track.url,\n          }))\n      } */\n    });\n  },\n\n  save(playlistTitle, playlistTracks) {\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      // console.log(typeof jsonResponse)\n      const user_id = jsonResponse.display_name;\n      // console.log(user_id);\n\n      // Deuxième fetch (exemple de fetch POST)\n      return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          \"name\": {\n            playlistTitle\n          },\n          \"description\": \"New playlist description\",\n          \"public\": true\n        })\n      });\n    }).then(secondResponse => {\n      // Gérer la réponse du deuxième fetch\n      return secondResponse.json();\n      console.log(secondResponse.json);\n    }).catch(error => {\n      console.error('Erreur lors de la requête :', error);\n    });\n  }\n};\nexport default Spotify;\n\n/*\n\nhttp://localhost:3000/#access_token=\n\nBQAdWaHnVSALSU79mwzaSdb6qt9hUF4eMdvMT01vT4KxlRGZu3zHt1MbC0OeX4JS8fKofRQyHgAC8IKEPKEGlsqxslcaIVD4V4nJvsYXf0TKn-gjo81vssO3F-fxrvmHmsbNCeL_hX9dUTUJRJ0si6uBIOMWT_JDa5HD-5Ge-vHTNfQ0MBys5tNwS49CqTEFNiG7WA\n\n&token_type=Bearer&expires_in=3600&state=Gpj8Z5JbRFRCrCEB\n\n\nhttp://localhost:3000/#access_token=BQBg5KUkZhSUot1SGUGqA9DJC1Oc0G0-jhlxVusLJyRJwDxjYso9jShjAOfCFFfO6a9CkzTizgWnV1n3ZvukUa027tN0PW5P1dqsuzK25J48GwZTucwziLMHAFtA1gciv_TgaJGyoEpUcaJrNLjlL7Lf6DBG7TY2VRxdM4auS7dGdrsW3NrZtp1X9iG6JQdysyYSsg&token_type=Bearer&expires_in=3600&state=QCPva1QXmogqAXMW\n\n*/","map":{"version":3,"names":["apiKey","Spotify","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","tracks","itemsArray","Object","values","save","playlistTitle","playlistTracks","user_id","display_name","method","body","JSON","stringify","secondResponse","console","log","catch","error"],"sources":["/Users/alexandresuteau/Desktop/CODE/CODECADEMY/07_Create a Front-End APP with React/99_PROJECT_Jammming/jammming/src/utils/Spotify.js"],"sourcesContent":["const apiKey = \"BQAdWaHnVSALSU79mwzaSdb6qt9hUF4eMdvMT01vT4KxlRGZu3zHt1MbC0OeX4JS8fKofRQyHgAC8IKEPKEGlsqxslcaIVD4V4nJvsYXf0TKn-gjo81vssO3F-fxrvmHmsbNCeL_hX9dUTUJRJ0si6uBIOMWT_JDa5HD-5Ge-vHTNfQ0MBys5tNwS49CqTEFNiG7WA\" // Access token à renouveler toutes les heures \n\nconst Spotify = {\n    search(term) {\n        return fetch(\n            `https://api.spotify.com/v1/search?q=${term}&type=track`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n\n                // console.log(jsonResponse);\n                // console.log('jsonResponse is an ' + typeof jsonResponse);\n                // console.log(jsonResponse.tracks)\n                // console.log(jsonResponse.tracks.items)\n                const items = jsonResponse.tracks.items;\n                // const arrayFromJson = Array.from(jsonResponse.tracks.items);\n\n                // console.log('arrayFromJson is an ' + typeof arrayFromJson);\n                // console.log('arrayFromJson is ' + typeof arrayFromJson);\n                // console.log(arrayFromJson);\n\n                // console.log(items[0]);\n                const itemsArray = Object.values(items);\n                // console.log(typeof itemsArray);\n                // console.log(itemsArray);\n                // console.log(typeof itemsArray);\n                // console.log(itemsArray);\n\n                /* const arrayFromJsonMap = items.map((track, index) => {\n                    [index] = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album,\n                        url: track.uri,\n                    }\n                }) */\n\n                // console.log(arrayFromJsonMap);\n                return itemsArray;\n\n\n\n                /*\n                if (arrayFromJson) { // track est il bien le bon suffixe ?\n                    return arrayFromJson.map((track) => ({\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artist,\n                        album: track.album,\n                        url: track.url,\n                    }))\n                } */\n            })\n    },\n\n    save(playlistTitle, playlistTracks) {\n        return fetch(\n            `https://api.spotify.com/v1/me`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                // console.log(typeof jsonResponse)\n                const user_id = jsonResponse.display_name\n                // console.log(user_id);\n\n                // Deuxième fetch (exemple de fetch POST)\n                return fetch(\n                    `https://api.spotify.com/v1/users/${user_id}/playlists`,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            \"name\": {playlistTitle},\n                            \"description\": \"New playlist description\",\n                            \"public\": true\n                        }),\n                    }\n                );\n            })\n            .then((secondResponse) => {\n                // Gérer la réponse du deuxième fetch\n                return secondResponse.json();\n                console.log(secondResponse.json);\n            })\n            .catch((error) => {\n                console.error('Erreur lors de la requête :', error);\n            });\n    }\n}\n\n\nexport default Spotify;\n\n\n\n/*\n\nhttp://localhost:3000/#access_token=\n\nBQAdWaHnVSALSU79mwzaSdb6qt9hUF4eMdvMT01vT4KxlRGZu3zHt1MbC0OeX4JS8fKofRQyHgAC8IKEPKEGlsqxslcaIVD4V4nJvsYXf0TKn-gjo81vssO3F-fxrvmHmsbNCeL_hX9dUTUJRJ0si6uBIOMWT_JDa5HD-5Ge-vHTNfQ0MBys5tNwS49CqTEFNiG7WA\n\n&token_type=Bearer&expires_in=3600&state=Gpj8Z5JbRFRCrCEB\n\n\nhttp://localhost:3000/#access_token=BQBg5KUkZhSUot1SGUGqA9DJC1Oc0G0-jhlxVusLJyRJwDxjYso9jShjAOfCFFfO6a9CkzTizgWnV1n3ZvukUa027tN0PW5P1dqsuzK25J48GwZTucwziLMHAFtA1gciv_TgaJGyoEpUcaJrNLjlL7Lf6DBG7TY2VRxdM4auS7dGdrsW3NrZtp1X9iG6JQdysyYSsg&token_type=Bearer&expires_in=3600&state=QCPva1QXmogqAXMW\n\n*/"],"mappings":"AAAA,MAAMA,MAAM,GAAG,wMAAwM,EAAC;;AAExN,MAAMC,OAAO,GAAG;EACZC,MAAMA,CAACC,IAAI,EAAE;IACT,OAAOC,KAAK,CACP,uCAAsCD,IAAK,aAAY,EACxD;MACIE,OAAO,EAAE;QACLC,aAAa,EAAG,UAASN,MAAO;MACpC;IACJ,CAEJ,CAAC,CACIO,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDF,IAAI,CAAEG,YAAY,IAAK;MAEpB;MACA;MACA;MACA;MACA,MAAMC,KAAK,GAAGD,YAAY,CAACE,MAAM,CAACD,KAAK;MACvC;;MAEA;MACA;MACA;;MAEA;MACA,MAAME,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;MACvC;MACA;MACA;MACA;;MAEA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEgB;MACA,OAAOE,UAAU;;MAIjB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACY,CAAC,CAAC;EACV,CAAC;;EAEDG,IAAIA,CAACC,aAAa,EAAEC,cAAc,EAAE;IAChC,OAAOd,KAAK,CACP,+BAA8B,EAC/B;MACIC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASN,MAAO;MACpC;IACJ,CACJ,CAAC,CACIO,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDF,IAAI,CAAEG,YAAY,IAAK;MACpB;MACA,MAAMS,OAAO,GAAGT,YAAY,CAACU,YAAY;MACzC;;MAEA;MACA,OAAOhB,KAAK,CACP,oCAAmCe,OAAQ,YAAW,EACvD;QACIE,MAAM,EAAE,MAAM;QACdhB,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASN,MAAO;QACpC,CAAC;QACDsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB,MAAM,EAAE;YAACP;UAAa,CAAC;UACvB,aAAa,EAAE,0BAA0B;UACzC,QAAQ,EAAE;QACd,CAAC;MACL,CACJ,CAAC;IACL,CAAC,CAAC,CACDV,IAAI,CAAEkB,cAAc,IAAK;MACtB;MACA,OAAOA,cAAc,CAAChB,IAAI,CAAC,CAAC;MAC5BiB,OAAO,CAACC,GAAG,CAACF,cAAc,CAAChB,IAAI,CAAC;IACpC,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACV;AACJ,CAAC;AAGD,eAAe5B,OAAO;;AAItB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}