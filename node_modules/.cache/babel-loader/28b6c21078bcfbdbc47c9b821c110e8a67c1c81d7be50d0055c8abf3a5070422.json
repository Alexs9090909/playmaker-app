{"ast":null,"code":"const apiKey = \"BQA9g99DF86es3fOmsZihC5oR6A1PWTwzQej-XQgI27M-Ht4NVp6D4mgSjTXd9icQlRYpMdQCd1bYUG532bkxyxoHxHo9A_x75H36bFgonBq-Y6IjPpkSX_5F0ouatDllyPMQdMsJyEUwEaw9Lg-JJro6GfQeW0kaFI0JmE0BzryJ-v5dDDujONa-5oRUaanReIyt_IbFMt5keSXvte51Cs_uZZtopj1o0sVoB4RXgJV2jrOgxE1uxYTJCzc\"; // Access token à renouveler toutes les heures \n\nconst Spotify = {\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      // console.log(jsonResponse);\n      // console.log('jsonResponse is an ' + typeof jsonResponse);\n      // console.log(jsonResponse.tracks)\n      // console.log(jsonResponse.tracks.items)\n      const items = jsonResponse.tracks.items;\n      // const arrayFromJson = Array.from(jsonResponse.tracks.items);\n\n      // console.log('arrayFromJson is an ' + typeof arrayFromJson);\n      // console.log('arrayFromJson is ' + typeof arrayFromJson);\n      // console.log(arrayFromJson);\n\n      // console.log(items[0]);\n      const itemsArray = Object.values(items);\n      // console.log(typeof itemsArray);\n      // console.log(itemsArray);\n      // console.log(typeof itemsArray);\n      // console.log(itemsArray);\n\n      /* const arrayFromJsonMap = items.map((track, index) => {\n          [index] = {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album,\n              url: track.uri,\n          }\n      }) */\n\n      // console.log(arrayFromJsonMap);\n      return itemsArray;\n\n      /*\n      if (arrayFromJson) { // track est il bien le bon suffixe ?\n          return arrayFromJson.map((track) => ({\n              id: track.id,\n              name: track.name,\n              artist: track.artist,\n              album: track.album,\n              url: track.url,\n          }))\n      } */\n    });\n  },\n\n  save(playlistTitle, playlistTracks) {\n    return fetch(`https://api.spotify.com/v1/me`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      // console.log(typeof jsonResponse)\n      console.log(jsonResponse);\n      const user_id = jsonResponse.id;\n      console.log(user_id);\n\n      // Deuxième fetch (exemple de fetch POST)\n      return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          \"name\": `${playlistTitle}`,\n          \"description\": \"New playlist description\",\n          \"public\": false\n        })\n      }).then(secondResponse => {\n        // Gérer la réponse du deuxième fetch\n        // if (secondResponse.ok) {\n        // console.log(secondResponse.json);\n        return secondResponse.json();\n\n        // throw new Error('Request failed man!');\n      }, networkError => console.log(networkError.message)).then(secondJsonResponse => {\n        // console.log(jsonResponse);\n        console.log(secondJsonResponse);\n        const playlist_id = secondJsonResponse.id;\n        console.log(playlist_id);\n        return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists/${playlist_id}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify({\n            \"uris\": `${playlistTracks}`,\n            \"position\": 0\n          })\n        });\n      });\n    }).catch(error => {\n      console.error('Erreur lors de la requête man :', error);\n    });\n  }\n};\nexport default Spotify;\n\n/*\n\n\nhttp://localhost:3000/#access_token=\n\nBQCkgDy6I7scm-6-2_O6kisSHV5Y41fDR83_fSgFk2phtbDghTqLI-tvHkGcgSgSgvsIdeNENhjqM5d7egjKrAc99y8haGPNUfVOPIpMK6Oxg174g6XoAfTqSc_htgI7xj5oNwTetlb1TAa0zdtK8VMedeeB1oVZa4PjRk4-1yAhOzIIsGTB31DEynXFdWpG5qatbLo4GbuUNqAmnQKOZJJBkAuaodEa9PimN3nai3Y-w6HX32XPrLABPDlI\n\n&token_type=Bearer&expires_in=3600&state=zHTL5QnoFFY5hZ5Z\n\nhttp://localhost:3000/#access_token=\n\nBQA9g99DF86es3fOmsZihC5oR6A1PWTwzQej-XQgI27M-Ht4NVp6D4mgSjTXd9icQlRYpMdQCd1bYUG532bkxyxoHxHo9A_x75H36bFgonBq-Y6IjPpkSX_5F0ouatDllyPMQdMsJyEUwEaw9Lg-JJro6GfQeW0kaFI0JmE0BzryJ-v5dDDujONa-5oRUaanReIyt_IbFMt5keSXvte51Cs_uZZtopj1o0sVoB4RXgJV2jrOgxE1uxYTJCzc\n\n&token_type=Bearer&expires_in=3600&state=rveUwozN6Q3FiBeU\n\n*/\n\n/* jusqu'ici ca fonctionne */","map":{"version":3,"names":["apiKey","Spotify","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","tracks","itemsArray","Object","values","save","playlistTitle","playlistTracks","console","log","user_id","id","method","body","JSON","stringify","secondResponse","networkError","message","secondJsonResponse","playlist_id","catch","error"],"sources":["/Users/alexandresuteau/Desktop/CODE/CODECADEMY/07_Create a Front-End APP with React/99_PROJECT_Jammming/jammming/src/utils/Spotify.js"],"sourcesContent":["const apiKey = \"BQA9g99DF86es3fOmsZihC5oR6A1PWTwzQej-XQgI27M-Ht4NVp6D4mgSjTXd9icQlRYpMdQCd1bYUG532bkxyxoHxHo9A_x75H36bFgonBq-Y6IjPpkSX_5F0ouatDllyPMQdMsJyEUwEaw9Lg-JJro6GfQeW0kaFI0JmE0BzryJ-v5dDDujONa-5oRUaanReIyt_IbFMt5keSXvte51Cs_uZZtopj1o0sVoB4RXgJV2jrOgxE1uxYTJCzc\" // Access token à renouveler toutes les heures \n\nconst Spotify = {\n    search(term) {\n        return fetch(\n            `https://api.spotify.com/v1/search?q=${term}&type=track`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n\n                // console.log(jsonResponse);\n                // console.log('jsonResponse is an ' + typeof jsonResponse);\n                // console.log(jsonResponse.tracks)\n                // console.log(jsonResponse.tracks.items)\n                const items = jsonResponse.tracks.items;\n                // const arrayFromJson = Array.from(jsonResponse.tracks.items);\n\n                // console.log('arrayFromJson is an ' + typeof arrayFromJson);\n                // console.log('arrayFromJson is ' + typeof arrayFromJson);\n                // console.log(arrayFromJson);\n\n                // console.log(items[0]);\n                const itemsArray = Object.values(items);\n                // console.log(typeof itemsArray);\n                // console.log(itemsArray);\n                // console.log(typeof itemsArray);\n                // console.log(itemsArray);\n\n                /* const arrayFromJsonMap = items.map((track, index) => {\n                    [index] = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album,\n                        url: track.uri,\n                    }\n                }) */\n\n                // console.log(arrayFromJsonMap);\n                return itemsArray;\n\n\n\n                /*\n                if (arrayFromJson) { // track est il bien le bon suffixe ?\n                    return arrayFromJson.map((track) => ({\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artist,\n                        album: track.album,\n                        url: track.url,\n                    }))\n                } */\n            })\n    },\n\n    save(playlistTitle, playlistTracks) {\n        return fetch(\n            `https://api.spotify.com/v1/me`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                },\n            }\n        )\n            .then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                // console.log(typeof jsonResponse)\n                console.log(jsonResponse);\n                const user_id = jsonResponse.id;\n                console.log(user_id);\n\n                // Deuxième fetch (exemple de fetch POST)\n                return fetch(\n                    `https://api.spotify.com/v1/users/${user_id}/playlists`,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        },\n                        body: JSON.stringify({\n                            \"name\": `${playlistTitle}`,\n                            \"description\": \"New playlist description\",\n                            \"public\": false\n                        }),\n                    }\n                )\n                    .then((secondResponse) => {\n                        // Gérer la réponse du deuxième fetch\n                        // if (secondResponse.ok) {\n                        // console.log(secondResponse.json);\n                        return secondResponse.json();\n\n                        // throw new Error('Request failed man!');\n                    }, networkError => console.log(networkError.message)\n                    ).then(secondJsonResponse => {\n                        // console.log(jsonResponse);\n                        console.log(secondJsonResponse);\n                        const playlist_id = secondJsonResponse.id;\n                        console.log(playlist_id);\n\n                        return fetch(\n                            `https://api.spotify.com/v1/users/${user_id}/playlists/${playlist_id}/tracks`,\n                            {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                    Authorization: `Bearer ${apiKey}`\n                                },\n                                body: JSON.stringify({\n                                    \"uris\": `${playlistTracks}`,\n                                    \"position\": 0\n                                }),\n                            }\n                        )\n                    })\n                    ;\n            })\n\n            .catch((error) => {\n                console.error('Erreur lors de la requête man :', error);\n            });\n    }\n}\n\n\nexport default Spotify;\n\n\n\n/*\n\n\nhttp://localhost:3000/#access_token=\n\nBQCkgDy6I7scm-6-2_O6kisSHV5Y41fDR83_fSgFk2phtbDghTqLI-tvHkGcgSgSgvsIdeNENhjqM5d7egjKrAc99y8haGPNUfVOPIpMK6Oxg174g6XoAfTqSc_htgI7xj5oNwTetlb1TAa0zdtK8VMedeeB1oVZa4PjRk4-1yAhOzIIsGTB31DEynXFdWpG5qatbLo4GbuUNqAmnQKOZJJBkAuaodEa9PimN3nai3Y-w6HX32XPrLABPDlI\n\n&token_type=Bearer&expires_in=3600&state=zHTL5QnoFFY5hZ5Z\n\nhttp://localhost:3000/#access_token=\n\nBQA9g99DF86es3fOmsZihC5oR6A1PWTwzQej-XQgI27M-Ht4NVp6D4mgSjTXd9icQlRYpMdQCd1bYUG532bkxyxoHxHo9A_x75H36bFgonBq-Y6IjPpkSX_5F0ouatDllyPMQdMsJyEUwEaw9Lg-JJro6GfQeW0kaFI0JmE0BzryJ-v5dDDujONa-5oRUaanReIyt_IbFMt5keSXvte51Cs_uZZtopj1o0sVoB4RXgJV2jrOgxE1uxYTJCzc\n\n&token_type=Bearer&expires_in=3600&state=rveUwozN6Q3FiBeU\n\n*/\n\n\n/* jusqu'ici ca fonctionne */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}