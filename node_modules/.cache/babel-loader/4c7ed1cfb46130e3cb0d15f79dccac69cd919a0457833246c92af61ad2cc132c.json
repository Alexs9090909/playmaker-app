{"ast":null,"code":"import React,{useState}from'react';// import './App.css';\nimport styles from'./App.module.css';import SearchBar from'../SearchBar/SearchBar';import Tracklist from'../Tracklist/Tracklist';import{getToken,Spotify}from'../../utils/Spotify';import PlaylistBar from'../PlaylistBar/PlaylistBar';import Playlist from'../Playlist/Playlist';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// on déclare le state de la liste de résultats de la recherche\nconst[trackSearchList,setTrackSearchList]=useState([]);// on déclare la fonction de recherche qui renvoie au fetch situé dans utils/Spotify et on met à jour le state de la liste de résultat avec\nconst searchSpotify=async term=>{const trackSearchResults=await Spotify.search(term);setTrackSearchList(trackSearchResults);};// on déclare le state de la liste de tracks destinées à la playlist\nconst[playlistTracks,setPlaylistTracks]=useState([]);// on déclare la fonction qui permet de rajouter des tracks\nconst addPlaylistTracks=newPlaylistTrack=>{setPlaylistTracks([...playlistTracks,newPlaylistTrack]);};// on déclare la fonction qui enlève les tracks de la playlist\nconst removePlaylistTrack=indexToRemove=>{const updatedArray=playlistTracks.filter((_,index)=>index!==indexToRemove);setPlaylistTracks(updatedArray);};// on déclare la fonction qui va sauvegarder la playlist en renvoyant vers un fetch POST\nconst saveSpotifyPlaylist=async(playlistTitle,playlistTracks)=>{const uriArray=playlistTracks.map(element=>element.uri);await Spotify.save(playlistTitle,uriArray);};return/*#__PURE__*/_jsxs(\"div\",{className:styles.Container,children:[/*#__PURE__*/_jsx(\"button\",{onClick:getToken,children:\"connect\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.BlueSection,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.SearchContainer,children:[/*#__PURE__*/_jsx(\"h1\",{className:styles.SearchTitle,children:\"Search\"}),/*#__PURE__*/_jsx(SearchBar,{className:styles.SearchBar,searchSpotify:searchSpotify}),/*#__PURE__*/_jsx(Tracklist,{tracklistData:trackSearchList,addPlaylistTracks:addPlaylistTracks})]})}),/*#__PURE__*/_jsx(\"div\",{className:styles.RedSection,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.PlaylistContainer,children:[/*#__PURE__*/_jsx(\"h1\",{className:styles.PlaylistTitle,children:\"Playlist\"}),/*#__PURE__*/_jsx(PlaylistBar,{className:styles.PlaylistTitle,saveSpotifyPlaylist:saveSpotifyPlaylist,playlistTracks:playlistTracks}),/*#__PURE__*/_jsx(Playlist,{playlistData:playlistTracks,removePlaylistTrack:removePlaylistTrack})]})})]});};export default App;","map":{"version":3,"names":["React","useState","styles","SearchBar","Tracklist","getToken","Spotify","PlaylistBar","Playlist","jsx","_jsx","jsxs","_jsxs","App","trackSearchList","setTrackSearchList","searchSpotify","term","trackSearchResults","search","playlistTracks","setPlaylistTracks","addPlaylistTracks","newPlaylistTrack","removePlaylistTrack","indexToRemove","updatedArray","filter","_","index","saveSpotifyPlaylist","playlistTitle","uriArray","map","element","uri","save","className","Container","children","onClick","BlueSection","SearchContainer","SearchTitle","tracklistData","RedSection","PlaylistContainer","PlaylistTitle","playlistData"],"sources":["/Users/alexandresuteau/Desktop/CODE/CODECADEMY/07_Create a Front-End APP with React/99_PROJECT_Jammming/jammming/src/components/App/App.js"],"sourcesContent":["import React, { useState } from 'react';\n// import './App.css';\nimport styles from './App.module.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Tracklist from '../Tracklist/Tracklist';\nimport { getToken, Spotify } from '../../utils/Spotify';\nimport PlaylistBar from '../PlaylistBar/PlaylistBar';\nimport Playlist from '../Playlist/Playlist';\n\n\nconst App = () => {\n\n  // on déclare le state de la liste de résultats de la recherche\n  const [trackSearchList, setTrackSearchList] = useState([]);\n\n  // on déclare la fonction de recherche qui renvoie au fetch situé dans utils/Spotify et on met à jour le state de la liste de résultat avec\n  const searchSpotify = async (term) => {\n    const trackSearchResults = await Spotify.search(term);\n    setTrackSearchList(trackSearchResults);\n  }\n\n  // on déclare le state de la liste de tracks destinées à la playlist\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n\n\n  // on déclare la fonction qui permet de rajouter des tracks\n  const addPlaylistTracks = (newPlaylistTrack) => {\n    setPlaylistTracks([...playlistTracks, newPlaylistTrack]);\n  };\n\n\n  // on déclare la fonction qui enlève les tracks de la playlist\n  const removePlaylistTrack = (indexToRemove) => {\n    const updatedArray = playlistTracks.filter((_,index) => index !== indexToRemove);\n    setPlaylistTracks(updatedArray);\n  }\n\n  // on déclare la fonction qui va sauvegarder la playlist en renvoyant vers un fetch POST\n  const saveSpotifyPlaylist = async (playlistTitle, playlistTracks) => {\n    const uriArray = playlistTracks.map((element) => element.uri);\n    await Spotify.save(playlistTitle, uriArray);\n  };\n\n  return (\n    <div className={styles.Container}>\n      <button onClick={getToken}>connect</button>\n      <div className={styles.BlueSection}>\n        <div className={styles.SearchContainer}>\n          <h1 className={styles.SearchTitle}>Search</h1>\n          <SearchBar className={styles.SearchBar} searchSpotify={searchSpotify}/>\n          <Tracklist tracklistData={trackSearchList} addPlaylistTracks={addPlaylistTracks} />\n        </div>\n      </div>\n      <div className={styles.RedSection}>\n        <div className={styles.PlaylistContainer}>\n            <h1 className={styles.PlaylistTitle}>Playlist</h1>\n            <PlaylistBar className={styles.PlaylistTitle} saveSpotifyPlaylist={saveSpotifyPlaylist} playlistTracks={playlistTracks} />\n            <Playlist playlistData={playlistTracks} removePlaylistTrack={removePlaylistTrack} />  \n        </div>    \n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC;AACA,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CACrC,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,OAASC,QAAQ,CAAEC,OAAO,KAAQ,qBAAqB,CACvD,MAAO,CAAAC,WAAW,KAAM,4BAA4B,CACpD,MAAO,CAAAC,QAAQ,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG5C,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAEhB;AACA,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAE1D;AACA,KAAM,CAAAe,aAAa,CAAG,KAAO,CAAAC,IAAI,EAAK,CACpC,KAAM,CAAAC,kBAAkB,CAAG,KAAM,CAAAZ,OAAO,CAACa,MAAM,CAACF,IAAI,CAAC,CACrDF,kBAAkB,CAACG,kBAAkB,CAAC,CACxC,CAAC,CAED;AACA,KAAM,CAACE,cAAc,CAAEC,iBAAiB,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAGxD;AACA,KAAM,CAAAqB,iBAAiB,CAAIC,gBAAgB,EAAK,CAC9CF,iBAAiB,CAAC,CAAC,GAAGD,cAAc,CAAEG,gBAAgB,CAAC,CAAC,CAC1D,CAAC,CAGD;AACA,KAAM,CAAAC,mBAAmB,CAAIC,aAAa,EAAK,CAC7C,KAAM,CAAAC,YAAY,CAAGN,cAAc,CAACO,MAAM,CAAC,CAACC,CAAC,CAACC,KAAK,GAAKA,KAAK,GAAKJ,aAAa,CAAC,CAChFJ,iBAAiB,CAACK,YAAY,CAAC,CACjC,CAAC,CAED;AACA,KAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAOC,aAAa,CAAEX,cAAc,GAAK,CACnE,KAAM,CAAAY,QAAQ,CAAGZ,cAAc,CAACa,GAAG,CAAEC,OAAO,EAAKA,OAAO,CAACC,GAAG,CAAC,CAC7D,KAAM,CAAA7B,OAAO,CAAC8B,IAAI,CAACL,aAAa,CAAEC,QAAQ,CAAC,CAC7C,CAAC,CAED,mBACEpB,KAAA,QAAKyB,SAAS,CAAEnC,MAAM,CAACoC,SAAU,CAAAC,QAAA,eAC/B7B,IAAA,WAAQ8B,OAAO,CAAEnC,QAAS,CAAAkC,QAAA,CAAC,SAAO,CAAQ,CAAC,cAC3C7B,IAAA,QAAK2B,SAAS,CAAEnC,MAAM,CAACuC,WAAY,CAAAF,QAAA,cACjC3B,KAAA,QAAKyB,SAAS,CAAEnC,MAAM,CAACwC,eAAgB,CAAAH,QAAA,eACrC7B,IAAA,OAAI2B,SAAS,CAAEnC,MAAM,CAACyC,WAAY,CAAAJ,QAAA,CAAC,QAAM,CAAI,CAAC,cAC9C7B,IAAA,CAACP,SAAS,EAACkC,SAAS,CAAEnC,MAAM,CAACC,SAAU,CAACa,aAAa,CAAEA,aAAc,CAAC,CAAC,cACvEN,IAAA,CAACN,SAAS,EAACwC,aAAa,CAAE9B,eAAgB,CAACQ,iBAAiB,CAAEA,iBAAkB,CAAE,CAAC,EAChF,CAAC,CACH,CAAC,cACNZ,IAAA,QAAK2B,SAAS,CAAEnC,MAAM,CAAC2C,UAAW,CAAAN,QAAA,cAChC3B,KAAA,QAAKyB,SAAS,CAAEnC,MAAM,CAAC4C,iBAAkB,CAAAP,QAAA,eACrC7B,IAAA,OAAI2B,SAAS,CAAEnC,MAAM,CAAC6C,aAAc,CAAAR,QAAA,CAAC,UAAQ,CAAI,CAAC,cAClD7B,IAAA,CAACH,WAAW,EAAC8B,SAAS,CAAEnC,MAAM,CAAC6C,aAAc,CAACjB,mBAAmB,CAAEA,mBAAoB,CAACV,cAAc,CAAEA,cAAe,CAAE,CAAC,cAC1HV,IAAA,CAACF,QAAQ,EAACwC,YAAY,CAAE5B,cAAe,CAACI,mBAAmB,CAAEA,mBAAoB,CAAE,CAAC,EACnF,CAAC,CACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAX,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}